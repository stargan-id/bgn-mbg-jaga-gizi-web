// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Model for Users, Accounts, Sessions, and Verification Tokens
model Permission {
  id          String           @id @default(cuid())
  name        String //@unique
  resource    String // e.g., "post", "dashboard"
  action      String // e.g., "create", "read", "update", "delete"
  description String?
  createdBy   String           @map("created_by")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedBy   String?          @map("updated_by")
  updatedAt   DateTime?        @updatedAt @map("updated_at")
  roles       RolePermission[]

  @@unique([resource, action])
  @@map("permissions")
}

model Role {
  id          String           @id @default(cuid())
  name        String           @unique
  description String?
  createdBy   String           @map("created_by")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedBy   String?          @map("updated_by")
  updatedAt   DateTime?        @updatedAt @map("updated_at")
  extendedBy  RoleExtension[]  @relation("RoleExtender") // Roles that extend this role
  extends     RoleExtension[]  @relation("RoleExtendee") // Roles this role extends
  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model RoleExtension {
  id             String @id @default(cuid())
  baseRoleId     String @map("base_role_id") // The role being extended 
  extendedRoleId String @map("extended_role_id") // The role that extends it
  baseRole       Role   @relation("RoleExtendee", fields: [baseRoleId], references: [id], onDelete: Cascade)
  extendedRole   Role   @relation("RoleExtender", fields: [extendedRoleId], references: [id], onDelete: Cascade)

  @@map("role_extensions")
}

model RolePermission {
  roleId       String     @map("role_id")
  permissionId String     @map("permission_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  userId String @map("user_id")
  roleId String @map("role_id")
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model User {
  id             String          @id @default(cuid())
  name           String
  email          String          @unique
  password       String?
  emailVerified  DateTime?       @map("email_verified")
  image          String?
  status         StatusUser      @default(AKTIF) @map("status_aktif")
  sessions       Session[]
  organisasiId   String?         @map("organisasi_id")
  organisasi     Organisasi?     @relation(fields: [organisasiId], references: [id])
  createdBy      String          @default("init") @map("created_by")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedBy      String?         @map("updated_by")
  updatedAt      DateTime?       @updatedAt @map("updated_at")
  userRole       UserRole[]
  userPreference UserPreference? // 1-to-1 relation with UserPreference

  @@map("users")
}

model UserPreference {
  id        String    @id @map("user_id") // this will be the user id (foreign key)
  tema      String?
  bahasa    String?
  detil     Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  // Relation to User
  user User @relation(fields: [id], references: [id])

  @@map("user_preferences")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([identifier, token])
  @@map("verification_tokens")
}

enum StatusAktif {
  AKTIF
  NON_AKTIF
  DIBUBARKAN
}

enum StatusUser {
  AKTIF
  NON_AKTIF
  DIBLOKIR
}

model Organisasi {
  id                String       @id @default(cuid())
  nama              String
  singkatan         String?
  status            StatusAktif  @default(AKTIF) // Mengganti aktif dengan enum status
  tingkat           Int? //@default(-1)
  indukOrganisasiId String?      @map("induk_organisasi_id")
  indukOrganisasi   Organisasi?  @relation("pohon_organisasi", fields: [indukOrganisasiId], references: [id])
  createdBy         String       @map("created_by")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedBy         String?      @map("updated_by")
  updatedAt         DateTime?    @map("updated_at")
  subOrganisasi     Organisasi[] @relation("pohon_organisasi")
  user              User[]
  sppg              Sppg[]

  @@map("organisasi")
}

// SPPG (Satuan Pelayanan Pemenuhan Gizi) - Core entity
model Sppg {
  id               String         @id @default(cuid())
  nama             String
  alamat           String
  kontak           String?
  kapasitasProduksi Int           @map("kapasitas_produksi")
  statusVerifikasi StatusVerifikasi @default(DRAFT) @map("status_verifikasi")
  longitude        Float?
  latitude         Float?
  organisasiId     String         @map("organisasi_id")
  organisasi       Organisasi     @relation(fields: [organisasiId], references: [id])
  createdBy        String         @map("created_by")
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedBy        String?        @map("updated_by")
  updatedAt        DateTime?      @updatedAt @map("updated_at")
  
  // Relations
  dokumenSppg      DokumenSppg[]
  checklistHarian  ChecklistHarian[]
  laporanBahanBaku LaporanBahanBaku[]
  menuHarian       MenuHarian[]
  
  @@map("sppg")
}

// Dokumen kepatuhan SPPG
model DokumenSppg {
  id            String        @id @default(cuid())
  jenisDokumen  JenisDokumen  @map("jenis_dokumen")
  namaDokumen   String        @map("nama_dokumen")
  nomorDokumen  String?       @map("nomor_dokumen")
  tanggalTerbit DateTime      @map("tanggal_terbit")
  tanggalExpiry DateTime?     @map("tanggal_expiry")
  filePath      String        @map("file_path")
  statusDokumen StatusDokumen @default(PENDING) @map("status_dokumen")
  catatanReview String?       @map("catatan_review")
  sppgId        String        @map("sppg_id")
  sppg          Sppg          @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  createdBy     String        @map("created_by")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedBy     String?       @map("updated_by")
  updatedAt     DateTime?     @updatedAt @map("updated_at")
  
  @@map("dokumen_sppg")
}

// Checklist harian operasional
model ChecklistHarian {
  id                   String               @id @default(cuid())
  tanggal              DateTime
  kebersihanSdm        Boolean              @map("kebersihan_sdm")
  kebersihanInfrastruktur Boolean          @map("kebersihan_infrastruktur")
  kondisiPeralatan     Boolean              @map("kondisi_peralatan")
  suhuPenyimpanan      Float?               @map("suhu_penyimpanan")
  catatan              String?
  fotoEvidence         String[]             @map("foto_evidence")
  skorKepatuhan        Int?                 @map("skor_kepatuhan")
  status               StatusChecklist      @default(DRAFT)
  sppgId               String              @map("sppg_id")
  sppg                 Sppg                @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  createdBy            String              @map("created_by")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedBy            String?             @map("updated_by")
  updatedAt            DateTime?           @updatedAt @map("updated_at")
  
  @@unique([sppgId, tanggal])
  @@map("checklist_harian")
}

// Pemasok bahan baku
model Pemasok {
  id               String             @id @default(cuid())
  nama             String
  alamat           String
  kontak           String?
  jenisPemasok     JenisPemasok       @map("jenis_pemasok")
  statusAktif      StatusAktif        @default(AKTIF) @map("status_aktif")
  sertifikat       String[]
  createdBy        String             @map("created_by")
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedBy        String?            @map("updated_by")
  updatedAt        DateTime?          @updatedAt @map("updated_at")
  
  // Relations
  laporanBahanBaku LaporanBahanBaku[]
  
  @@map("pemasok")
}

// Laporan penerimaan bahan baku
model LaporanBahanBaku {
  id              String           @id @default(cuid())
  tanggal         DateTime
  namaBahan       String           @map("nama_bahan")
  jenisBahan      JenisBahan       @map("jenis_bahan")
  jumlah          Float
  satuan          String
  tanggalExpiry   DateTime?        @map("tanggal_expiry")
  kondisiBahan    KondisiBahan     @map("kondisi_bahan")
  suhuPenerimaan  Float?           @map("suhu_penerimaan")
  fotoEvidence    String[]         @map("foto_evidence")
  catatan         String?
  sppgId          String           @map("sppg_id")
  sppg            Sppg             @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  pemasokId       String           @map("pemasok_id")
  pemasok         Pemasok          @relation(fields: [pemasokId], references: [id])
  createdBy       String           @map("created_by")
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedBy       String?          @map("updated_by")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
  
  @@map("laporan_bahan_baku")
}

// Menu harian dan analisis gizi
model MenuHarian {
  id               String            @id @default(cuid())
  tanggal          DateTime
  namaMenu         String            @map("nama_menu")
  deskripsi        String?
  porsiTarget      Int               @map("porsi_target")
  kaloriPerPorsi   Float?            @map("kalori_per_porsi")
  proteinPerPorsi  Float?            @map("protein_per_porsi")
  karbohidratPerPorsi Float?         @map("karbohidrat_per_porsi")
  lemakPerPorsi    Float?            @map("lemak_per_porsi")
  statusAkg        StatusAkg         @default(BELUM_DIEVALUASI) @map("status_akg")
  catatanGizi      String?           @map("catatan_gizi")
  biayaPerPorsi    Float?            @map("biaya_per_porsi")
  fotoMenu         String[]          @map("foto_menu")
  sppgId           String            @map("sppg_id")
  sppg             Sppg              @relation(fields: [sppgId], references: [id], onDelete: Cascade)
  createdBy        String            @map("created_by")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedBy        String?           @map("updated_by")
  updatedAt        DateTime?         @updatedAt @map("updated_at")
  
  // Relations
  komponenMenu     KomponenMenu[]
  
  @@unique([sppgId, tanggal])
  @@map("menu_harian")
}

// Komponen/ingredient dalam menu
model KomponenMenu {
  id            String     @id @default(cuid())
  namaBahan     String     @map("nama_bahan")
  jumlah        Float
  satuan        String
  kaloriPer100g Float?     @map("kalori_per_100g")
  proteinPer100g Float?    @map("protein_per_100g")
  karbohidratPer100g Float? @map("karbohidrat_per_100g")
  lemakPer100g  Float?     @map("lemak_per_100g")
  menuHarianId  String     @map("menu_harian_id")
  menuHarian    MenuHarian @relation(fields: [menuHarianId], references: [id], onDelete: Cascade)
  createdAt     DateTime   @default(now()) @map("created_at")
  
  @@map("komponen_menu")
}

// Master data standar AKG
model StandarAkg {
  id                String   @id @default(cuid())
  kelompokUsia      String   @map("kelompok_usia")
  minKalori         Float    @map("min_kalori")
  maxKalori         Float?   @map("max_kalori")
  minProtein        Float    @map("min_protein")
  minKarbohidrat    Float    @map("min_karbohidrat")
  minLemak          Float    @map("min_lemak")
  deskripsi         String?
  statusAktif       StatusAktif @default(AKTIF) @map("status_aktif")
  createdBy         String   @map("created_by")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedBy         String?  @map("updated_by")
  updatedAt         DateTime? @updatedAt @map("updated_at")
  
  @@map("standar_akg")
}

// Log aktivitas dan audit trail
model LogAktivitas {
  id          String      @id @default(cuid())
  entityType  String      @map("entity_type") // sppg, menu, checklist, etc
  entityId    String      @map("entity_id")
  action      String      // create, update, delete, approve, etc
  description String
  oldData     Json?       @map("old_data")
  newData     Json?       @map("new_data")
  ipAddress   String?     @map("ip_address")
  userAgent   String?     @map("user_agent")
  userId      String      @map("user_id")
  createdAt   DateTime    @default(now()) @map("created_at")
  
  @@map("log_aktivitas")
}

// Enum definitions
enum StatusVerifikasi {
  DRAFT
  UNDER_REVIEW
  APPROVED
  REJECTED
  SUSPENDED
}

enum JenisDokumen {
  SLHS // Sertifikat Laik Higiene Sanitasi
  SERTIFIKAT_HALAL
  FOOD_HANDLER_CERTIFICATE
  DENAH_DAPUR
  SIUP
  IZIN_OPERASIONAL
  LAINNYA
}

enum StatusDokumen {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum StatusChecklist {
  DRAFT
  SUBMITTED
  REVIEWED
}

enum JenisPemasok {
  SAYURAN
  DAGING
  IKAN
  BERAS_BIJI
  BUMBU_REMPAH
  LAINNYA
}

enum JenisBahan {
  PROTEIN_HEWANI
  PROTEIN_NABATI
  KARBOHIDRAT
  SAYURAN
  BUAH
  BUMBU_REMPAH
  MINYAK_LEMAK
  LAINNYA
}

enum KondisiBahan {
  SANGAT_BAIK
  BAIK
  CUKUP
  BURUK
}

enum StatusAkg {
  MEMENUHI
  HAMPIR_MEMENUHI
  TIDAK_MEMENUHI
  BELUM_DIEVALUASI
}
